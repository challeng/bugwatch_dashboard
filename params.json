{"name":"Bugwatch dashboard","body":"Bugwatch is a git repository analyzer that gives you real time analytics about code complexity and more. \r\n\r\n![Bugwatch Dashboard](http://img826.imageshack.us/img826/7585/bugwatch.png)\r\n\r\n## Track your (ruby) repositories\r\nThe bugwatch_dashboard project is a Rails application that provides a user interface to visualize analyzed commits.\r\nOnce you have the server running, it's easy to install a new repository in a few different ways.\r\n\r\n### Via Github\r\nIf your project is already on Github, then all you have to do is set up a [post-receive hook](http://help.github.com/post-receive-hooks/). \r\n\r\n1. Point the post-receive URL at \"/hook\" as a relative path to your host. eg: http://example.com/hook\r\n2. Click \"Test Hook\" and it will clone and analyze your repository\r\n\r\n### Via Git\r\nIf your project is not on Github, then you can install a post-receive GIT hook on the remote repository.\r\n\r\n1. Make sure json gem is installed at a system level\r\n2. Copy \"lib/post_receive.rb\" contents into git hooks directory as \"post-receive\". (GIT_DIR/.git/hooks) \r\n3. Edit \"hook_url\" local variable at bottom of post-receive script to point at \"/hook\" as a relative path to your host. eg: http://example.com/hook\r\n4. Wait for a new commit to be pushed to fire off the initial payload to begin analyzing\r\n\r\n## Create your own analyzer\r\nBugwatch can be used as a platform for performing different types of analysis on commits. To be fully compliant, an analyzer must respond to \"call\" and take a single argument, commit, which is an instance of Bugwatch::Commit.\r\n\r\n```\r\nclass CommitAnalyzer\r\n  def self.call(commit)\r\n    # ... do stuff with commit here\r\n  end\r\nend\r\n```\r\n","tagline":"Real time analytics & more","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}